import { Logger } from "tslog";
import { DevicesManager } from "../DevicesManager";

export namespace AirtonDriver {

    const log = new Logger();

    const MESSAGE_IDENTIFY = Buffer.from([0x01]);
    const MESSAGE_ECHO = Buffer.from([0x02]);
    const MESSAGE_EMIT = Buffer.from([0x03]);
    var buffer_freq = Buffer.alloc(4);
    buffer_freq.writeInt32BE(38, 0);
    var on24hot = [2944, 1784, 432, 1116, 368, 1180, 368, 460, 392, 432, 364, 460, 364, 1184, 396, 428, 432, 408, 396, 1152, 396, 1152, 396, 432, 364, 1184, 392, 432, 432, 392, 396, 1152, 368, 1196, 436, 392, 392, 1156, 396, 1152, 396, 428, 368, 460, 364, 1180, 368, 460, 364, 480, 388, 1156, 392, 432, 396, 428, 436, 392, 392, 428, 396, 432, 432, 392, 396, 444, 396, 428, 436, 392, 364, 460, 392, 432, 392, 432, 432, 392, 396, 428, 396, 448, 448, 372, 396, 432, 392, 1152, 396, 432, 448, 376, 368, 1180, 396, 432, 364, 472, 396, 1152, 396, 432, 448, 376, 396, 428, 396, 432, 444, 380, 392, 432, 392, 448, 392, 1156, 396, 1152, 396, 1152, 396, 436, 440, 380, 396, 428, 392, 432, 448, 392, 396, 428, 396, 1152, 396, 428, 396, 1152, 400, 1148, 400, 1152, 396, 428, 448, 392, 396, 428, 396, 432, 392, 432, 448, 376, 448, 376, 396, 428, 448, 380, 448, 392, 392, 432, 448, 376, 396, 428, 396, 428, 448, 380, 392, 432, 392, 428, 400, 444, 448, 376, 396, 428, 396, 432, 448, 376, 396, 428, 392, 432, 448, 376, 396, 444, 448, 376, 448, 376, 452, 376, 396, 428, 396, 428, 448, 376, 452, 372, 396, 448, 448, 1096, 452, 1096, 452, 376, 396, 1152, 448, 1100, 448, 1100, 452, 1100, 448, 380, 448];
    var off = [2984, 1748, 428, 1116, 436, 1116, 432, 392, 432, 396, 428, 392, 432, 1120, 432, 392, 432, 408, 432, 1116, 432, 1116, 432, 396, 428, 1120, 432, 392, 432, 396, 428, 1116, 456, 1108, 456, 372, 432, 1116, 432, 1116, 432, 396, 452, 372, 452, 1092, 456, 372, 456, 388, 452, 1092, 456, 376, 448, 372, 452, 372, 456, 368, 456, 372, 452, 372, 452, 388, 452, 372, 456, 368, 456, 376, 448, 368, 456, 372, 456, 368, 456, 376, 448, 384, 456, 376, 448, 372, 452, 380, 448, 368, 456, 368, 456, 1092, 456, 372, 452, 388, 452, 1092, 456, 372, 456, 368, 456, 376, 448, 372, 452, 372, 456, 376, 448, 384, 456, 1092, 456, 1092, 456, 1092, 456, 380, 444, 372, 456, 372, 452, 376, 448, 396, 444, 1092, 460, 376, 448, 1092, 456, 1092, 456, 1092, 456, 1096, 452, 380, 448, 384, 456, 376, 448, 372, 452, 372, 452, 372, 456, 376, 448, 372, 452, 372, 452, 388, 452, 372, 452, 372, 452, 372, 456, 368, 456, 372, 452, 380, 444, 372, 452, 388, 456, 368, 456, 372, 452, 372, 452, 380, 444, 372, 452, 372, 452, 380, 444, 388, 452, 376, 452, 372, 452, 372, 452, 380, 444, 372, 452, 376, 452, 376, 448, 388, 452, 372, 452, 1096, 452, 372, 452, 1096, 452, 1096, 456, 1096, 452, 1096, 452, 380, 448];
var onHotSleep = [3000, 1728, 452, 1096, 452, 1096, 400, 428, 448, 376, 452, 372, 452, 1096, 456, 372, 452, 384, 404, 1152, 396, 1144, 404, 424, 452, 1096, 452, 376, 452, 376, 396, 1144, 456, 1112, 452, 372, 400, 1148, 400, 1148, 400, 428, 448, 376, 452, 1096, 452, 372, 452, 388, 400, 1148, 452, 380, 392, 428, 452, 372, 452, 372, 448, 380, 448, 372, 452, 388, 452, 376, 452, 372, 452, 372, 448, 376, 400, 428, 448, 376, 452, 376, 400, 436, 452, 372, 452, 372, 448, 1100, 452, 376, 448, 376, 452, 1096, 448, 376, 452, 392, 444, 1100, 400, 428, 448, 376, 452, 376, 444, 376, 452, 372, 452, 372, 400, 440, 452, 1096, 400, 1148, 404, 1148, 400, 424, 452, 376, 448, 372, 400, 428, 448, 392, 448, 1100, 452, 372, 452, 372, 400, 1148, 400, 1148, 404, 1144, 404, 424, 448, 392, 452, 372, 400, 424, 448, 376, 452, 376, 452, 372, 452, 372, 400, 424, 452, 388, 400, 424, 452, 376, 452, 368, 404, 424, 448, 376, 452, 372, 452, 372, 452, 388, 452, 376, 452, 372, 452, 372, 448, 380, 448, 372, 452, 372, 452, 376, 452, 384, 404, 424, 448, 376, 452, 372, 452, 376, 452, 372, 400, 424, 452, 372, 452, 388, 448, 376, 452, 1096, 452, 372, 404, 1144, 456, 1096, 452, 1096, 452, 1096, 452, 380, 448]; 
    function toBuffer(array: number[]) {
        var buffer = Buffer.alloc(4*array.length)
        array.map((value, index) => {
            return buffer.writeInt32BE(value,4*index);
        });
        return buffer;
    }
    
    function toBufferLength(b: number[]) {
        var buffer = Buffer.alloc(4);
        buffer.writeInt32BE(b.length, 0);
        return buffer;
    }
    
    function sendCommand(command: number[]) {
        return new Promise((resolve, reject) => {
            let data = toBuffer(command);
            let length = toBufferLength(command);
            console.log(command.length);
            const b = Buffer.concat([MESSAGE_EMIT,buffer_freq, length, data], 10+data.length); 
            DevicesManager.broadcast(b);
        });
    }
    
    export function setOn24Hot() {
        return sendCommand(on24hot);
    }
    export function setOnhotSleep() {
       return sendCommand(onHotSleep);
    }
    export function setOff() {
        return sendCommand(off);
    }
}
